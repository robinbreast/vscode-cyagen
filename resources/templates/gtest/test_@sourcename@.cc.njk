/// this is generated googletest script based on {{ sourcename }}.c

#include <gtest/gtest.h>
#include <gmock/gmock.h>
#include <string>
#include <map>

//////////////////////////////////////////////////////////////////////////////
/// to access a local static variable from unit test script
/// 1. add LOCAL_STATIC_VARIABLE(variable) after the declaration of the variable in the function
/// 2. use ACCESS_LOCAL_STATIC_VARIABLE(fn, vn, vt) in unit test script
std::map<std::pair<std::string, std::string>, void*> _local_static_variables;
#define LOCAL_STATIC_VARIABLE(var) _local_static_variables[std::make_pair(__func__, #var)] = &var
#define ACCESS_LOCAL_STATIC_VARIABLE(fn, vn, vt) *static_cast<vt *>([](){ try { return _local_static_variables.at(std::make_pair(#fn,#vn)); } catch (const std::exception& e) { fprintf(stderr,"(%s,%s) not existed\n",#fn,#vn); return (void*)nullptr; } }())
//////////////////////////////////////////////////////////////////////////////

extern "C"
{
  {% for inc in incs -%}
  {{ inc.captured | safe }}
  {% endfor -%}
  // MANUAL SECTION: {{ generateUUID(sourcename ~ "include") }}
  // MANUAL SECTION END
}

/// Stub class for stub functions
class Stub
{
public:
  Stub(Stub const &) = delete;
  Stub(Stub &&) = delete;
  Stub &operator=(Stub const &) = delete;
  Stub &operator=(Stub &&) = delete;
  static auto &getInstance()
  {
    static Stub st;
    return st;
  }
  // MANUAL SECTION: {{ generateUUID(sourcename ~ "stub") }}
  // MOCK_METHOD(<return>, <stub_func1>, (<arg1>, ...) ());
  // MOCK_METHOD(<return>, <stub_func2>, (<arg1>, ...) ());
  // MANUAL SECTION END
private:
  Stub(){}
};

extern "C"
{
  // MANUAL SECTION: {{ generateUUID(sourcename ~ "extern") }}
  // MANUAL SECTION END

  /// redirect external functions to stub functions
  // MANUAL SECTION: {{ generateUUID(sourcename ~ "stub-macro-define") }}
  // #define stub_func1 Stub::getInstance().stub_func1
  // #define stub_func2 Stub::getInstance().stub_func2
  // MANUAL SECTION END
  // include SUT
  #include "{{ sourcename }}.c"
  /// restore external functions
  // MANUAL SECTION: {{ generateUUID(sourcename ~ "stub-macro-undef") }}
  // #undef stub_func1
  // #define stub_func1 stub_func1
  // #undef stub_func2
  // #define stub_func2 stub_func2
  // MANUAL SECTION END
}

/// usage of EXPECT_CALL() for stub functions
// EXPECT_CALL(Stub::getInstance(), stub_func1()).WillOnce(::testing::Return(1));

// MANUAL SECTION: {{ generateUUID(sourcename ~ "global") }}
// MANUAL SECTION END

{% for fnc in fncs -%}
/// define a test case for the {{ fnc.name }} function
TEST(Test_{{ sourcename }}Test, {{ fnc.name }}) {
  // MANUAL SECTION: {{ generateUUID(fnc.name) }}
  // MANUAL SECTION END
}
{% endfor %}
{% for fnc in fncs -%}
{% for ncl in ncls -%}
{% if fnc.name == ncl.callee.name -%}
// {{ ncl.caller.name }} calls {{ ncl.callee.name }}
{% endif -%}
{% endfor -%}
{% endfor %}
int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}