
//////////////////////////////////////////////////////////////////////////////
/// to access a local static variable from unit test script
/// to use {{ lsvMacroName }}(funcname, datatype, varname, initvalue) in target source
#define {{ lsvMacroName }}(funcname, datatype, varname, initvalue) \
    datatype& varname = _##funcname##_##varname

extern "C"
{
/// includes for local variables datatype reference
{%- for inc in incs %}
{%- if not inc.captured.includes('_MemMap.h') %}
{{ inc.captured | safe }}
{%- endif %}
{%- endfor %}
/// local static variables
{%- for var in static_vars %}
{%- if var.is_local %}
{{ var.dtype }} _{{ var.func_name }}_{{ var.name }};
{%- endif %}
{%- endfor %}

/// invalidate all the static visibility before including target source
#if defined(LOCAL_INLINE)
# undef LOCAL_INLINE
# define LOCAL_INLINE __attribut__((visibility("default")))
#endif //defined(LOCAL_INLINE)

#if defined(LOCAL)
# undef LOCAL
# define LOCAL __attribute__((visibility("default")))
#endif //defined(LOCAL)

#if defined(STATIC)
# undef STATIC
# define STATIC __attribut__((visibility("default")))
#endif //defined(STATIC)

#define inline
#if defined(INLINE)
# undef INLINE
# define INLINE
#endif //defined(INLINE)
#define static

/// include SUT
#include "{{ sourcename }}.c"

}
